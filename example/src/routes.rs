/// Code generated by nano-rs. DO NOT EDIT.
use axum::Router;
use axum::routing::get;
use axum::routing::post;
pub fn get_routes(
    crate_service_context: crate::ServiceContext,
    nano_rs_config_rest_rest_config: nano_rs::config::rest::RestConfig,
) -> Router {
    Router::new()
        .merge(get_routes_crate_service_context(crate_service_context.clone()))
        .merge(
            get_routes_crate_service_context_with_layer_crate_layers_auth_auth_token_crate_service_context_with_layer_crate_layers_auth_auth_token1(
                crate_service_context.clone(),
            ),
        )
        .merge(
            get_routes_nano_rs_config_rest_rest_config_with_layer_crate_layers_auth_auth_token_crate_service_context(
                nano_rs_config_rest_rest_config.clone(),
                crate_service_context.clone(),
            ),
        )
        .merge(get_routes_without_state())
        .merge(get_routes_without_state_with_layer_crate_layers_auth_auth_token1())
}
pub fn get_routes_crate_service_context(
    crate_service_context: crate::ServiceContext,
) -> Router {
    Router::new()
        .route("/samoyed/name", get(crate::api::pet::samoyed::name))
        .route("/samoyed/:name", get(crate::api::pet::samoyed::hello))
        .with_state(crate_service_context)
}
pub fn get_routes_crate_service_context_with_layer_crate_layers_auth_auth_token_crate_service_context_with_layer_crate_layers_auth_auth_token1(
    crate_service_context: crate::ServiceContext,
) -> Router {
    Router::new()
        .route("/samoyed/shower", post(crate::api::pet::samoyed::shower))
        .route_layer(
            axum::middleware::from_fn_with_state(
                crate_service_context.clone(),
                crate::layers::auth::auth_token,
            ),
        )
        .route_layer(axum::middleware::from_fn(crate::layers::auth::auth_token1))
        .with_state(crate_service_context)
}
pub fn get_routes_nano_rs_config_rest_rest_config_with_layer_crate_layers_auth_auth_token_crate_service_context(
    nano_rs_config_rest_rest_config: nano_rs::config::rest::RestConfig,
    crate_service_context: crate::ServiceContext,
) -> Router {
    Router::new()
        .route("/store/tel", get(crate::api::pet::store::get_store_tel))
        .route_layer(
            axum::middleware::from_fn_with_state(
                crate_service_context,
                crate::layers::auth::auth_token,
            ),
        )
        .with_state(nano_rs_config_rest_rest_config)
}
pub fn get_routes_without_state() -> Router {
    Router::new().route("/samoyed/miss", get(crate::api::pet::samoyed::miss))
}
pub fn get_routes_without_state_with_layer_crate_layers_auth_auth_token1() -> Router {
    Router::new()
        .route("/store/name", get(crate::api::pet::store::get_store_name))
        .route_layer(axum::middleware::from_fn(crate::layers::auth::auth_token1))
}
